
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_limber.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_limber.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_limber.py:


=====================
Simple Limber Example
=====================
A simple example showing how to apply the Limber model to correct for Limb darkening in a small SST/CRISP image.
This data is loaded using `astropy.fits`, but crispy could be used too.

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    from astropy.io import fits
    from smug.limber_adapter import LimberAdapter
    from smug.limber_model import model_params, pretrained_limber








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Load the Ca 8542 Angstrom data

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: default

    im = fits.open("../tests/mini_crisp_l2_20140906_152724_8542_r00459.fits")









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Load pretrained limber network

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    line = "CaII8542"
    model = pretrained_limber(line)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://www.astro.gla.ac.uk/users/osborne/Limber_CaII8542_1.0.0.pth.tar" to /home/runner/.cache/torch/hub/checkpoints/Limber_CaII8542_1.0.0.pth.tar
      0%|          | 0.00/77.7M [00:00<?, ?B/s]      0%|          | 32.0k/77.7M [00:00<06:21, 214kB/s]      0%|          | 64.0k/77.7M [00:00<06:21, 214kB/s]      0%|          | 112k/77.7M [00:00<05:10, 262kB/s]       0%|          | 160k/77.7M [00:00<04:45, 285kB/s]      0%|          | 224k/77.7M [00:00<04:01, 336kB/s]      0%|          | 304k/77.7M [00:00<03:21, 403kB/s]      1%|          | 416k/77.7M [00:01<02:37, 516kB/s]      1%|          | 560k/77.7M [00:01<02:03, 655kB/s]      1%|          | 752k/77.7M [00:01<01:34, 851kB/s]      1%|1         | 960k/77.7M [00:01<01:19, 1.02MB/s]      2%|1         | 1.19M/77.7M [00:01<01:05, 1.23MB/s]      2%|1         | 1.48M/77.7M [00:01<00:54, 1.47MB/s]      2%|2         | 1.84M/77.7M [00:01<00:45, 1.76MB/s]      3%|2         | 2.27M/77.7M [00:02<00:37, 2.10MB/s]      4%|3         | 2.84M/77.7M [00:02<00:29, 2.66MB/s]      5%|4         | 3.58M/77.7M [00:02<00:23, 3.37MB/s]      6%|6         | 4.73M/77.7M [00:02<00:16, 4.73MB/s]      8%|8         | 6.41M/77.7M [00:02<00:11, 6.75MB/s]     10%|#         | 8.16M/77.7M [00:02<00:08, 8.29MB/s]     13%|#2        | 9.92M/77.7M [00:03<00:07, 9.39MB/s]     15%|#4        | 11.7M/77.7M [00:03<00:06, 10.1MB/s]     17%|#7        | 13.4M/77.7M [00:03<00:06, 10.7MB/s]     19%|#9        | 15.1M/77.7M [00:03<00:05, 11.0MB/s]     22%|##1       | 16.8M/77.7M [00:03<00:05, 11.2MB/s]     24%|##3       | 18.6M/77.7M [00:03<00:05, 11.4MB/s]     26%|##6       | 20.3M/77.7M [00:03<00:05, 11.5MB/s]     28%|##8       | 22.0M/77.7M [00:04<00:05, 11.6MB/s]     31%|###       | 23.8M/77.7M [00:04<00:04, 11.7MB/s]     33%|###2      | 25.5M/77.7M [00:04<00:04, 11.8MB/s]     35%|###5      | 27.3M/77.7M [00:04<00:04, 11.9MB/s]     37%|###7      | 29.0M/77.7M [00:04<00:04, 11.9MB/s]     40%|###9      | 30.8M/77.7M [00:04<00:04, 11.9MB/s]     42%|####1     | 32.6M/77.7M [00:05<00:03, 11.9MB/s]     44%|####4     | 34.3M/77.7M [00:05<00:03, 11.9MB/s]     46%|####6     | 36.1M/77.7M [00:05<00:03, 11.9MB/s]     49%|####8     | 37.8M/77.7M [00:05<00:03, 12.0MB/s]     51%|#####     | 39.6M/77.7M [00:05<00:03, 12.0MB/s]     53%|#####3    | 41.3M/77.7M [00:05<00:03, 12.0MB/s]     55%|#####5    | 43.1M/77.7M [00:05<00:03, 12.0MB/s]     58%|#####7    | 44.8M/77.7M [00:06<00:02, 11.9MB/s]     60%|#####9    | 46.5M/77.7M [00:06<00:02, 11.9MB/s]     62%|######2   | 48.3M/77.7M [00:06<00:02, 11.9MB/s]     64%|######4   | 50.0M/77.7M [00:06<00:02, 11.9MB/s]     67%|######6   | 51.8M/77.7M [00:06<00:02, 11.9MB/s]     69%|######8   | 53.5M/77.7M [00:06<00:02, 11.9MB/s]     71%|#######1  | 55.2M/77.7M [00:07<00:01, 11.9MB/s]     73%|#######3  | 57.0M/77.7M [00:07<00:01, 11.9MB/s]     76%|#######5  | 58.8M/77.7M [00:07<00:01, 11.9MB/s]     78%|#######7  | 60.5M/77.7M [00:07<00:01, 11.9MB/s]     80%|########  | 62.2M/77.7M [00:07<00:01, 12.0MB/s]     82%|########2 | 64.0M/77.7M [00:07<00:01, 12.0MB/s]     85%|########4 | 65.7M/77.7M [00:07<00:01, 11.9MB/s]     87%|########6 | 67.5M/77.7M [00:08<00:00, 11.9MB/s]     89%|########9 | 69.2M/77.7M [00:08<00:00, 12.0MB/s]     91%|#########1| 71.0M/77.7M [00:08<00:00, 12.0MB/s]     94%|#########3| 72.8M/77.7M [00:08<00:00, 12.0MB/s]     96%|#########5| 74.5M/77.7M [00:08<00:00, 11.9MB/s]     98%|#########8| 76.2M/77.7M [00:08<00:00, 11.9MB/s]    100%|##########| 77.7M/77.7M [00:08<00:00, 9.13MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 26-27

Compute wavelength grid used in Limber model from provided data, and construct Adapter.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: default

    grid = np.linspace(
        -model_params[line]["half_width"],
        model_params[line]["half_width"],
        model.size - 1,
    )
    limber_ca = LimberAdapter(model, grid)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Load wavelengths present in data file.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default

    central_wavelength = np.median(im[1].data)
    data_wavelength = im[1].data - central_wavelength








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Run the network to reproject the data

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default

    out = limber_ca.reproject_data(
        im[0].data.astype("<f4"),
        data_wavelength,
        mu_observed=0.565,
        reconstruct_original_shape=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Plot the output for a pixel, note the swapped indexing as we set `reconstruct_original_shape` to False.

.. GENERATED FROM PYTHON SOURCE LINES 50-56

.. code-block:: default

    idx = 8
    a = im[0].data.astype("<f4")
    b = out
    plt.plot(data_wavelength, a[:, idx, idx])
    plt.plot(grid, b[idx, idx, 1:])
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_limber_001.png
   :alt: plot limber
   :srcset: /auto_examples/images/sphx_glr_plot_limber_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  10.943 seconds)


.. _sphx_glr_download_auto_examples_plot_limber.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_limber.py <plot_limber.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_limber.ipynb <plot_limber.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
