
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_limber.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_limber.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_limber.py:


=====================
Simple Limber Example
=====================
A simple example showing how to apply the Limber model to correct for Limb darkening in a small SST/CRISP image.
This data is loaded using `astropy.fits`, but crispy could be used too.

.. GENERATED FROM PYTHON SOURCE LINES 8-15

.. code-block:: default


    import matplotlib.pyplot as plt
    import numpy as np
    from astropy.io import fits
    from smug.limber_adapter import LimberAdapter
    from smug.limber_model import model_params, pretrained_limber








.. GENERATED FROM PYTHON SOURCE LINES 16-17

Load the Ca 8542 Angstrom data

.. GENERATED FROM PYTHON SOURCE LINES 17-20

.. code-block:: default

    im = fits.open("../tests/mini_crisp_l2_20140906_152724_8542_r00459.fits")









.. GENERATED FROM PYTHON SOURCE LINES 21-22

Load pretrained limber network

.. GENERATED FROM PYTHON SOURCE LINES 22-25

.. code-block:: default

    line = "CaII8542"
    model = pretrained_limber(line)





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://www.astro.gla.ac.uk/users/osborne/Limber_CaII8542_1.0.0.pth.tar" to /home/runner/.cache/torch/hub/checkpoints/Limber_CaII8542_1.0.0.pth.tar
      0%|          | 0.00/77.7M [00:00<?, ?B/s]      0%|          | 32.0k/77.7M [00:00<05:36, 242kB/s]      0%|          | 80.0k/77.7M [00:00<04:20, 313kB/s]      0%|          | 128k/77.7M [00:00<04:02, 335kB/s]       0%|          | 208k/77.7M [00:00<03:04, 441kB/s]      0%|          | 336k/77.7M [00:00<02:09, 629kB/s]      1%|          | 592k/77.7M [00:00<01:15, 1.07MB/s]      1%|1         | 1.00M/77.7M [00:00<00:45, 1.78MB/s]      2%|2         | 1.70M/77.7M [00:01<00:27, 2.94MB/s]      4%|3         | 2.84M/77.7M [00:01<00:16, 4.77MB/s]      6%|5         | 4.53M/77.7M [00:01<00:10, 7.31MB/s]      8%|8         | 6.28M/77.7M [00:01<00:08, 9.20MB/s]     10%|#         | 8.00M/77.7M [00:01<00:07, 10.4MB/s]     13%|#2        | 9.73M/77.7M [00:01<00:06, 11.3MB/s]     15%|#4        | 11.5M/77.7M [00:01<00:05, 11.8MB/s]     17%|#6        | 13.2M/77.7M [00:02<00:05, 12.2MB/s]     19%|#9        | 14.9M/77.7M [00:02<00:05, 12.5MB/s]     21%|##1       | 16.6M/77.7M [00:02<00:05, 12.7MB/s]     24%|##3       | 18.3M/77.7M [00:02<00:04, 12.9MB/s]     26%|##5       | 20.1M/77.7M [00:02<00:04, 13.0MB/s]     28%|##8       | 21.8M/77.7M [00:02<00:04, 13.1MB/s]     30%|###       | 23.5M/77.7M [00:02<00:04, 12.6MB/s]     32%|###2      | 25.3M/77.7M [00:03<00:04, 12.9MB/s]     35%|###4      | 27.0M/77.7M [00:03<00:04, 12.2MB/s]     37%|###6      | 28.7M/77.7M [00:03<00:04, 12.6MB/s]     39%|###9      | 30.4M/77.7M [00:03<00:03, 12.8MB/s]     41%|####1     | 32.2M/77.7M [00:03<00:03, 12.9MB/s]     44%|####3     | 33.9M/77.7M [00:03<00:03, 13.0MB/s]     46%|####5     | 35.6M/77.7M [00:03<00:03, 13.1MB/s]     48%|####8     | 37.3M/77.7M [00:03<00:03, 13.1MB/s]     50%|#####     | 39.1M/77.7M [00:04<00:03, 13.2MB/s]     52%|#####2    | 40.8M/77.7M [00:04<00:02, 13.2MB/s]     55%|#####4    | 42.5M/77.7M [00:04<00:02, 13.3MB/s]     57%|#####6    | 44.3M/77.7M [00:04<00:02, 13.3MB/s]     59%|#####9    | 46.0M/77.7M [00:04<00:02, 13.3MB/s]     61%|######1   | 47.7M/77.7M [00:04<00:02, 13.3MB/s]     64%|######3   | 49.5M/77.7M [00:04<00:02, 13.3MB/s]     66%|######5   | 51.2M/77.7M [00:05<00:02, 13.3MB/s]     68%|######8   | 52.9M/77.7M [00:05<00:01, 13.3MB/s]     70%|#######   | 54.6M/77.7M [00:05<00:01, 13.3MB/s]     72%|#######2  | 56.4M/77.7M [00:05<00:01, 13.3MB/s]     75%|#######4  | 58.1M/77.7M [00:05<00:01, 13.3MB/s]     77%|#######6  | 59.8M/77.7M [00:05<00:01, 13.2MB/s]     79%|#######9  | 61.5M/77.7M [00:05<00:01, 13.2MB/s]     81%|########1 | 63.2M/77.7M [00:06<00:01, 13.1MB/s]     84%|########3 | 65.0M/77.7M [00:06<00:01, 13.3MB/s]     86%|########5 | 66.7M/77.7M [00:06<00:00, 13.3MB/s]     88%|########8 | 68.5M/77.7M [00:06<00:00, 13.3MB/s]     90%|######### | 70.2M/77.7M [00:06<00:00, 13.3MB/s]     93%|#########2| 71.9M/77.7M [00:06<00:00, 13.3MB/s]     95%|#########4| 73.7M/77.7M [00:06<00:00, 13.3MB/s]     97%|#########6| 75.4M/77.7M [00:07<00:00, 13.3MB/s]     99%|#########9| 77.1M/77.7M [00:07<00:00, 13.3MB/s]    100%|##########| 77.7M/77.7M [00:07<00:00, 11.4MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 26-27

Compute wavelength grid used in Limber model from provided data, and construct Adapter.

.. GENERATED FROM PYTHON SOURCE LINES 27-34

.. code-block:: default

    grid = np.linspace(
        -model_params[line]["half_width"],
        model_params[line]["half_width"],
        model.size - 1,
    )
    limber_ca = LimberAdapter(model, grid)








.. GENERATED FROM PYTHON SOURCE LINES 35-36

Load wavelengths present in data file.

.. GENERATED FROM PYTHON SOURCE LINES 36-39

.. code-block:: default

    central_wavelength = np.median(im[1].data)
    data_wavelength = im[1].data - central_wavelength








.. GENERATED FROM PYTHON SOURCE LINES 40-41

Run the network to reproject the data

.. GENERATED FROM PYTHON SOURCE LINES 41-48

.. code-block:: default

    out = limber_ca.reproject_data(
        im[0].data.astype("<f4"),
        data_wavelength,
        mu_observed=0.565,
        reconstruct_original_shape=False,
    )








.. GENERATED FROM PYTHON SOURCE LINES 49-50

Plot the output for a pixel, note the swapped indexing as we set `reconstruct_original_shape` to False.

.. GENERATED FROM PYTHON SOURCE LINES 50-60

.. code-block:: default

    idx = 8
    a = im[0].data.astype("<f4")
    b = out
    plt.plot(data_wavelength, a[:, idx, idx], label=r"$\mu=0.565$")
    plt.plot(grid, b[idx, idx, 1:], label=r"$\mu=1.0$ (predicted)")
    plt.xlabel(r"$\Delta\lambda$ [$\AA$]")
    plt.ylabel("Intensity [DN]")
    plt.title("Limber applied to Ca ɪɪ 8542 $\AA$")
    plt.legend()
    plt.show()



.. image-sg:: /auto_examples/images/sphx_glr_plot_limber_001.png
   :alt: Limber applied to Ca ɪɪ 8542 $\AA$
   :srcset: /auto_examples/images/sphx_glr_plot_limber_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  8.332 seconds)


.. _sphx_glr_download_auto_examples_plot_limber.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_limber.py <plot_limber.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_limber.ipynb <plot_limber.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
